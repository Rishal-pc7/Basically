<link rel="stylesheet" href="/stylesheets/policies.css">

<div class="policyParentDiv">
    <div class="">

    <div class="heading">
        <h5>Return & Exchange  Policy</h5>
    </div>
    <div class="content">
        <p>Items purchased from basically are eligible for return/exchange, if returned within 7 days of delivery.</p>
        <p>Product must be in their original condition – unworn, unused with the tag, labels & in the same packing.
           For all reverse shipping, a Rs.150 shipping fee needs to be processed for re-shipping. You can alternatively choose to self-ship/arrange pickups from.</p>
    </div>
    </div>
    <div class="para">
        <h5 class="subheading">
            Refund
        </h5>
        <div class="content">
            <p>Once the product reached our warehouse we will ensure the condition of the product, it should be unworn, unused with tag.</p>
            
        </div>
    </div>
    <div class="small-para">
        
        <div class="content">
            <p>If the product passes the quality check we will initiate the refund.</p>
            
        </div>
    </div>
    <div class="small-para">
        <div class="content">
            <p>The refund will be done through the customer’s bank account in which case he/she should select the account to which refund should be made. In case of COD orders being returned, the same should be done by providing details of one’s bank account. </p>
            
        </div>
    </div>
    <div class="small-para">
        
        <div class="content">
            <p>However when refunding, we will refund the full amount excluding the shipping charge of Rs. 150</p>
            
        </div>
    </div>
</div>

<script>
   
   let images=document.querySelectorAll('[data-src]')
   let imgOptions={}
   
   async function preLoadImage(img){
    const src=img.getAttribute("data-src")
    if(!src){
        return;
    }
    img.src=src

   }

   let imgObserver=new IntersectionObserver(async(entries,imgObserver)=>{
    entries.forEach(entry =>{
        if(!entry.isIntersecting){
            return;
        }else{
            preLoadImage(entry.target)
            imgObserver.unobserve(entry.target)
        }
    })
   })
    images.forEach(image =>{
        imgObserver.observe(image)
    })
</script>